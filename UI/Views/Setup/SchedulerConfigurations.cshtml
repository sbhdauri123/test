@{
    ViewBag.Title = "Scheduler Setup";
    Layout = "~/Views/Shared/_Layout.cshtml";
}

<div class="dragoMain" id="userTableContainer">
    <div id="gridContainer" class="toolControlContainer tc-Main">
        <header>
            <h2>Scheduler Setup</h2>
        </header>
        <div id="kGrid" class="toolControl">
        </div>
    </div>
</div>

<script src="~/Scripts/Greenhouse/common.js"></script>
<script type="text/javascript">

    $(function ()
    {
        var schedulerConfigurationHub = $.connection.schedulerConfigurationHub;

        //var dsServerTypes = LookupDataSourceCommaDelimit("ServerType");
        var dsServers = GetDataSource("GetServers", "ServerID", "ServerName");
        dsServers.fetch();
        var dsJobTypes = GetDataSource("GetJobTypes", "JobTypeID", "JobTypeName");
        dsJobTypes.fetch();

        var tplData = kendo.template($("#tplDataDisplayName").html());
        var tplcheck = kendo.template($("#tplCheck").html());


        $("#kGrid").kendoGrid({
            dataSource: SchedulerConfigurationDataSource()
            //, autoBind: false
            , columns: [
                {
                    command: [
                        { name: "edit", text: "", template: "<a class='btn-small lnkEdit'><i class='fa fa-pencil-square-o grid-edit-link'></i></a>", width: 10 }
                      , { name: "destroy", template: "<a class='btn-small lnkDelete'><i class='fa fa-times grid-edit-link'></i></a>", text: "", width: 10 }
                    ]
                     , width: 130
                     , title: "<button id='btnAdd' class='btn btn-primary'>Add Scheduler</button>", menu: false
                }
                 , { field: "JobExportName", title: "Job Export Name", width: "340px" }
				 , { field: "JobName", title: "Job Name", width: "200px" }
                 //, { field: "JobTypeID", title: "Job Type", width: "118px", template: "#=fnTemplateData('dsJobTypes', JobTypeID) #", filterable: { ui: jobTypesFilter } }
                 , { field: "ServerID", title: "Server", width: "188px", template: "#=fnTemplateData('dsServers', ServerID) #", filterable: { ui: serversFilter } }
                 , { field: "SortOrder", title: "Sort Order", width: "140px" }
                 //, { field: "CreatedDate", title: "Created", template: "#=kendo.toString(CreatedDate, 'G')#", width: "200px" }
                 , { field: "LastUpdated", title: "Last Updated", template: "#=kendo.toString(LastUpdated, 'G')#", width: "200px" }
            ]
            , editable: {
                mode: "popup"
                       , edit: true
                       , destroy: true
                       , create: true
                       , confirmation: "Are you sure you want to delete this?"
                       , template: $("#tplSchedulerConfiguration").html()
            }
            , dataBound: OnGridDataBind
            , edit: function (evt) {
                var container = evt.container;
                container.width("470").height("510");

                var win = container.data("kendoWindow");
                win.center();
                var title = (evt.model.JobExportName == "") ? "Add New Scheduler" : "Editing [" + evt.model.JobExportName + "]";
                win.title(title);

                var ddlServers = container.find("#ServerID");
                ddlServers.kendoDropDownList({
                    dataSource: dsServers
                    //, autoBind:false
                    , dataTextField: "Name"
                    , dataValueField: "ID"
                    , optionLabel: "--Select a Server--"
                });

                var ddljobTypes = container.find("#JobTypeID"); //
                ddljobTypes.kendoDropDownList({
                    dataSource: dsJobTypes
                    , dataTextField: "Name"
                    , dataValueField: "ID"
                    , optionLabel: "--Select a Job Type--"
                });

                SetValidation(container);

                evt.container.find(".k-grid-cancel").on("click", function (e) {
                    evt.sender.cancelChanges();
                });
            }
            , save: function (evt)
            {
                var container = evt.container;
                var validator = container.find(".lyrEdit").data("kendoValidator");
                if (!validator.validate())
                    evt.preventDefault();
            }
           , sortable: { mode: "multiple" }
           , columnMenu: gridColumMenuOptions
           , filterable: gridFilterOptions
           , resizable: true
           , pageable: true
           , scrollable: true
        }).data("kendoGrid")
        .wrapper.height("600px");

        function SchedulerConfigurationDataSource()
        {
        	return new kendo.data.DataSource({
        		type: "signalr",
        		autoSync: false,
                transport: {
                	signalr: {
                		promise:mainHub.ConnectionHub.start() ,
                		hub: schedulerConfigurationHub,
                		server: {
                		    read: "read"
							, create: "create"
							, destroy: "destroy"
							, update: "update"
                		},
                		client: {
                			read: "read"
							, create: "create"
							, destroy: "destroy"
							, update: "update"
                		}
                	},
                	parameterMap:function(option,type)
                	{
                		if (type === "create")
                		{
                			option.GUID = kendo.guid();
                		}else if (type === "destroy")
                		{
                		    //option.SettingsFields = option.SettingsFields.split(",");
                		    //option.SourceFileMetadataFields = option.SourceFileMetadataFields.split(",");
                		    //option.CustomPropertiesFields = option.CustomPropertiesFields.split(",");

                		}
                		return option;
                	}
                }//end transport
               , schema: {
                   model: {
                       id: "SchedulerConfigurationID"
                       , fields: {
                           SchedulerConfigurationID: { type: "number" }
                           , JobExportName: { type: "string" }
                           , JobName: { type: "string" }
                           , JobTypeID: { type: "string" }
                           , ServerID: { type: "string" }
                           , SortOrder: { type: "number", defaultValue: -1, validation: { min: 0, required: true } }
                           //, CreatedDate: { type: "date", format: "MM/dd/yyyy" }
                           , LastUpdated: { type: "date", format: "MM/dd/yyyy", parse: function (value) { return parseUTCDate(value) } }
                       }
                   }
                   , total: function (data) { return data.length; }
               }
               , requestEnd: function (e) {
                   kendo.ui.progress($(".k-grid"), false);
               }
               , requestStart: function (e) {
                   kendo.ui.progress($(".k-grid:visible"), true);
               }
               , serverPaging: false
               , serverSorting: false
               , serverFiltering: false
               , pageSize: 20
            });//end dataSource
        }//end DataSource()

        function SetValidation(container)
        {
            var validator = container.find(".lyrEdit").kendoValidator({
                rules: {
                    required: function (input)
                    {
                        if (input.is("[class*='required']"))
                        {
                            if (!$.trim(input.val()))
                                return false;
                            return true;
                        }
                        return true;
                    }
                }//end rules
                , messages: {
                    required: "* required"
                }
                , validateOnBlur: false
            });
        }

        function serversFilter(ele) {
            ele.kendoDropDownList({
                dataSource: dsServers
               , dataTextField: "Name"
               , dataValueField: "ID"
               , optionLabel: "--Select--"
            }).data("kendoDropDownList").wrapper.width("250px");
        }

        function jobTypesFilter(ele) {
            ele.kendoDropDownList({
                dataSource: dsJobTypes
               , dataTextField: "Name"
               , dataValueField: "ID"
               , optionLabel: "--Select--"
            }).data("kendoDropDownList").wrapper.width("250px");
        }

        fnTemplateData = function (dsName, idField) {
            var ds = eval(dsName);
            var htm = tplData({ DataSource: ds.data(), ID: idField });
            return htm;
        }

        fnTemplateCheck = function (value) {
            //var isChecked = (value == 0);
            var htm = tplcheck({
                Val: value //isChecked
            });
            return htm;
        }

    });

</script>

<script id="tplSchedulerConfiguration" type="text/x-kendo-template">
    <div id='lyrEdit' class="lyrEdit">

        <div class="control-group">
            <label for="JobExportName" class="control-label">Job Export Name:</label>
            <div class="controls"><input type="text" id="JobExportName" style="width: 400px; height:34px" class="required form-control" name="JobExportName" data-bind="value: JobExportName" /></div>
        </div>
        <div class="control-group">
            <label for="JobName" class="control-label">Job Name:</label>
            <div class="controls"><input type="text" id="JobName" style="width: 400px; height:34px" class="required form-control" name="JobName" data-bind="value: JobName" /></div>
        </div>
        <div class="control-group">
            <label for="JobTypeID" class="control-label">Job Type:</label>
            <div class="controls"><input id="JobTypeID" style="width:430px" class="required" name="JobTypeID" data-bind="value: JobTypeID" /></div>
        </div>
        <div class="control-group">
            <label for="ServerID" class="control-label">Server:</label>
            <div class="controls"><input id="ServerID" style="width:430px" class="required" name="ServerID" data-bind="value: ServerID" /></div>
        </div>
        <div class="control-group">
            <label for="SortOrder" class="control-label">Sort Order</label>
            <div class="controls">
                <input id="SortOrder"
                       name="SortOrder"
                       data-bind="value: SortOrder"
                       data-type="number"
                       class="required  form-control"
                       style="width: 400px"
                       type="number"
                       min="0"
                       @*data-role="numerictextbox"*@
                       @*required validationmessage="This Field is required"*@ />
            </div>
        </div>

    </div>
</script>

@*<script id="tplCheck" type="text/x-kendo-template">
        #
        var iconClass = "icon-ok";
        if(!Val) {
        iconClass = "icon-remove";
        }
        #
        <div style='text-align:center'><i class="#=iconClass#">&nbsp;</i></div>
    </script>*@

<script id="tplCheck" type="text/x-kendo-template">
    #
    var iconClass = "glyphicon glyphicon-ok green";
    if(!Val) {
    iconClass = "glyphicon glyphicon-remove red";
    }
    #
    <div style='text-align:center'><i class="#=iconClass#">&nbsp;</i></div>
</script>

<script id="tplDataDisplayName" type="text/x-kendo-template">
    <div>
        # var obj = $.grep(DataSource, function(ele,id){return ele.ID == ID});
        if(obj.length == 1){
        #
        #=obj[0].Name#
        #}#
    </div>
</script>