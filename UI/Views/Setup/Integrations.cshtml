@{
    ViewBag.Title = "Integrations";
    Layout = "~/Views/Shared/_Layout.cshtml";
}

<style>
    .container {
    width: 100%;
}
</style>

<div class="dragoMain" id="userTableContainer">
    <div id="gridContainer" class="toolControlContainer tc-Main">
        <header>
            <h2>Integration Setup</h2>            
        </header>
        <div id="kGrid" class="toolControl">
        </div>
    </div>
    <div id="dialog">
        <div id="child"></div>
    </div>
</div>

@section scripts
{
<script src="~/Scripts/Greenhouse/common.js"></script>
<script type="text/javascript">

    $(function () {
        $(".dragoMain").parents(".container").removeClass("container");
        var url = "/integrationHub";

        var integrationHub = new signalR.HubConnectionBuilder()
        .withUrl(url, {
            transport: signalR.HttpTransportType.LongPolling
        })
        .build();
    	
        var lyrGrid = $("#kGrid");

    	//fnRenderPopoverColumn = kendo.template($("#tplPopoverColumn").html());

    	var timeZoneOffset = new Date().getTimezoneOffset() * 60 * 1000;

        //fnRenderCustomPopovers = function (dataItem, title, splitChar) {
        //    var list = "<ol><li>" + dataItem.split(splitChar).sort().join("</li><li>") + "</li></ol>"

        //    var fnRenderPopoverColumnList = kendo.template($("#tplPopoverColumnItemList").html());
        //    return fnRenderPopoverColumnList({ Title: title, Val: dataItem, ListItems: list });
        //}

        var tplcheck = kendo.template($("#tplCheck").html());

        fnShowLoading(true);

        //used to make sure all datasources are loaded before rendering grid.
        var dsCounter = DataSourceCounter();
        

        var dsSources = GetDataSource("GetGreenhouseSources", "SourceID", "SourceName");
        dsSources.fetch(fnBindIntegrationDatasource);

        var tplData = kendo.template($("#tplDataDisplayName").html());

        var dsCrendentials = GetDataSource("GetAllCrendentials", "CredentialID", "CredentialName");
        dsCrendentials.fetch(fnBindIntegrationDatasource);

		var dsAgencyInstances = GetDataSourceFullMapping("GetAgencyInstances", { "ID": "InstanceID", "Name": "InstanceName", "IsActive":"isActive"});
        dsAgencyInstances.fetch(fnBindIntegrationDatasource);

        var dsMasterClients = GetDataSource("GetMasterClients", "MasterClientID", "MasterClientCode");
        dsMasterClients.fetch(fnBindIntegrationDatasource);

        var dsCountries = GetDataSource("GetAllCountries", "CountryID", "CountryName");
        dsCountries.fetch(fnBindIntegrationDatasource);

        var dsIntegration = IntegrationDataSource();
        
        lyrGrid.kendoGrid({            
            dataSource: dsIntegration
            , autoBind:false
           , columns:
               [
                   {
                       command: [{ name: "edit", text: "", template: "<a class='btn-small lnkEdit'><i class='fa fa-pencil-square-o grid-edit-link'></i></a>", width: 10 }
                      , {
                          //name: "destroy", template: "<a id='deletelnk' class='btn-small lnkDelete'><i class='fa fa-times grid-edit-link'></i></a>", text: "", width: 10,
                          name: "", template: "<a id='deletelnk'><i class='fa fa-times grid-edit-link'></i></a>", text: "", width: 10,
                      }]
                       , width: 140
                       , title: "<button id='btnAdd' class='btn btn-primary'>Add Integration</button>" , menu:false
                   }				   
                   , { field: "IntegrationName", title: "Name", width: "180px" }
                   , { field: "MatchType", title: "Match Type", width: "130px" }
                   , { field: "RegexMask", title: "Match Pattern", width: "200px", template: "#= trimText(RegexMask, 20) #" }
                   //, template: '#=fnRenderPopoverColumn({ Title: "Regex", Val:RegexMask })#'}
                   , { field: "SourceID", title: "Source", width: "170px", template: "#=fnTemplateData('dsSources', SourceID) #", filterable: {ui: sourceFilter} }
                   , { field: "CredentialID", title: "Credential Name", width: "200px", template: "#=fnTemplateData('dsCrendentials', CredentialID) #", filterable: { ui: credentialFilter } }
                   , { field: "InstanceID", title: "Agency Instance", width: "200px", template: "#=fnTemplateData('dsAgencyInstances', InstanceID) #", filterable: { ui: agencyinstanceFilter } }
                   , { field: "MasterClientID", title: "Master Client Code", width: "190px", template: "#=fnTemplateData('dsMasterClients', MasterClientID) #", filterable: { ui: masterclientFilter } }
                   , { field: "CountryID", title: "Country", width: "110px", template: "#=fnTemplateData('dsCountries', CountryID) #", filterable: { ui: countryFilter } }
                   , { field: "TimeZoneString", title: "Time Zone String", width: "180px", template: "#= trimText(TimeZoneString, 18) #" }
                   , { field: "EndpointURI", title: "Endpoint URI", width: "180px", template: "#= trimText(EndpointURI, 18) #" }
                   , { field: "FileStartDate", title: "File Start Date", width: "150px", template: "#=kendo.toString(FileStartDate, 'd')#" }

                   , {
                       field: "IsActive", title: "Active?", width: "100px", template: '#=fnTemplateCheck(IsActive)#',
                       filterable: {
                           multi: true,
                           checkAll: false,
                           itemTemplate: function (ee) {
                               return "<div><input type='checkbox' name='rb" + ee.field + "' value='#=data.IsActive#'/># if(data.IsActive) {# <i class='glyphicon glyphicon-ok green'/> #}else{# <i class='glyphicon glyphicon-remove red'/>#}#</div>";
                           }
                       }
                   }
                   , {
                       field: "DisableProcessing", title: "Processing Disabled", width: "100px", template: '#=fnTemplateCheck(DisableProcessing)#',
                       filterable: {
                           multi: true,
                           checkAll: false,
                           itemTemplate: function (ee) {
                               return "<div><input type='checkbox' name='rb" + ee.field + "' value='#=data.DisableProcessing#'/># if(data.DisableProcessing) {# <i class='glyphicon glyphicon-ok green'/> #}else{# <i class='glyphicon glyphicon-remove red'/>#}#</div>";
                           }
                       }
                   }

                   //, { field: "CreatedDate", title: "Created", template: "#=kendo.toString(CreatedDate, 'G')#", width: "200px" }
                        , { field: "LastUpdated", title: "Last Updated", template: "#=kendo.toString(LastUpdated, 'G')#", width: "200px" }
				   
               ]
           , editable: {
               mode: "popup"
               , edit: true
               //, destroy: true
               , create: true
               //, confirmation: "Are you sure you want to delete this?"
               , template: $("#integrationTemplate").html()
           }
           , sortable: { mode: "multiple" }
           , columnMenu: gridColumMenuOptions
           , filterable: gridFilterOptions
           , resizable: true           
           , pageable: true
           , scrollable: { virtual: false }
           , edit: function (evt) {
               var container = $(evt.container);
               container.width("460").height("650");

               var ddlSources = container.find("#SourceID");
               ddlSources.kendoDropDownList({
                   dataSource: dsSources
                   , dataTextField: "Name"
                   , dataValueField: "ID"
                   , optionLabel: "--Select a Source--"
               });

               var ddlCrendentials = container.find("#CredentialID");
               ddlCrendentials.kendoDropDownList({
                   dataSource: dsCrendentials
                   , dataTextField: "Name"
                   , dataValueField: "ID"
                   , optionLabel: "--Select Credential Name--"
               });

               var ddlMasterClients = container.find("#MasterClientID");
               ddlMasterClients.kendoDropDownList({
                   dataSource: dsMasterClients
                   , dataTextField: "Name"
                   , dataValueField: "ID"
                   , optionLabel: "--Select a Master Client--"
               });

	            var ddlAgencyInstances = container.find("#InstanceID"); //
			   ddlAgencyInstances.kendoDropDownList({
				   dataSource: dsAgencyInstances
				   , dataTextField: "Name"
				   , dataValueField: "ID"
				   , valueTemplate: "# if(data.IsActive == false) " +
					   "{# <div class='inactive'>#=data.Name#</div>#} " +
					   "else {# <div>#=data.Name#</div> #}#"
				   , template: "# if(data.IsActive == false) " +
					   "{# <div class='inactive'>#=data.Name#</div>#} " +
					   "else {# <div>#=data.Name#</div> #}#"
				   , optionLabel: { ID: -1, Name: "--Select an Agency Instance--", IsActive: true }
	            });

               var ddlCountries = container.find("#CountryID"); //
               ddlCountries.kendoDropDownList({
                   dataSource: dsCountries
                   , dataTextField: "Name"
                   , dataValueField: "ID"
                   , optionLabel: "--Select a Country--"
               });

               var dtFileStartDate = container.find("#FileStartDate");			
			   dtFileStartDate.kendoDatePicker();

               var win = container.data("kendoWindow");
               win.center();
               var title = (evt.model.IntegrationName == "") ? "Add New Integration" : "Editing [" + evt.model.IntegrationName + "]";
               win.title(title);

               var isActiveChekbox = container.find("#IsActive");
               var disableProcessing = container.find("#DisableProcessing");

               var isNewIntegration= (evt.model.IntegrationName == "");
               if (isNewIntegration) {
                   isActiveChekbox.prop("checked", true);
                   evt.model.IsActive = true;

                   disableProcessing.prop("checked", false);
                   evt.model.DisableProcessing = false;

               } else {
                   if (evt.model.IsActive) {
                       isActiveChekbox.prop("checked", true);
                   } else {
                       isActiveChekbox.prop("checked", false);
                   }

                   if (evt.model.DisableProcessing) {
                       disableProcessing.prop("checked", true);
                   } else {
                       disableProcessing.prop("checked", false);
                   }
               }


               SetValidationIntegration(container);

           } //end edit

           , dataBound: OnGridDataBind
           , confirmation: "Are you sure you want to delete this?"
           , save: function (evt) {
               var validator = evt.container.find(".lyrEdit").data("kendoValidator");
               if (!validator.validate()) {
                   evt.preventDefault();
               }

               // for Prefix-only
               if (evt.model.MatchType == "Prefix" && !evt.model.RegexMask.trimEnd().endsWith(".+"))
                   evt.model.RegexMask += ".+";

           }//end save

        }).data("kendoGrid")
        .wrapper.height("600px");




        // ====================================================================================================
        //$(document).on("click", "a#deletelnk.btn-small.lnkDelete", function (e) {
        $(document).on("click", "a#deletelnk", function (e) {
            e.preventDefault();

            //alert("TEST");

            var dataItem = lyrGrid.data("kendoGrid").dataItem(e.target.closest("tr"));
            var integrationID = dataItem.IntegrationID;

            if (!confirm("Are you sure you want to delete this?"))
                return;

            $.ajax({
                url: baseUrl + "/DeleteIntegrationUponValidation",
                data: { IntegrationID: integrationID },
                type: "POST",
                dataType: "json",
                success: function (data2) {

                    if (data2 == "1") {
                        var dataSource = $("#kGrid").data("kendoGrid").dataSource;
                        dataSource.remove(dataItem);
                    }
                    else
                        alert("Unable to delete due to associated elements.");

                },
                error: OnError
            });
        });
        // ====================================================================================================


        // ====================================================================================================
        //tooltip
        lyrGrid.kendoTooltip({
            show: function (e) {
                if (this.content.text() != null && this.content.text().length > 0) {
                    this.content.parent().css("visibility", "visible");
                }
            },
            hide: function (e) {
                this.content.parent().css("visibility", "hidden");
            },
            filter: "td:nth-child(4)",
            position: "bottom",
            content: function (e) {
                var dataItem = lyrGrid.data("kendoGrid").dataItem(e.target.closest("tr"));
                var content = dataItem.RegexMask;
                return content;
            }
        });

        lyrGrid.kendoTooltip({
            show: function (e) {
                if (this.content.text() != null && this.content.text().length > 0) {
                    this.content.parent().css("visibility", "visible");
                }
            },
            hide: function (e) {
                this.content.parent().css("visibility", "hidden");
            },
            filter: "td:nth-child(10)",
            position: "bottom",
            content: function (e) {
                var dataItem = lyrGrid.data("kendoGrid").dataItem(e.target.closest("tr"));
                var content = dataItem.TimeZoneString;
                return content;
            }
        });

        lyrGrid.kendoTooltip({
            show: function (e) {
                if (this.content.text() != null && this.content.text().length > 0) {
                    this.content.parent().css("visibility", "visible");
                }
            },
            hide: function (e) {
                this.content.parent().css("visibility", "hidden");
            },
            filter: "td:nth-child(11)",
            position: "bottom",
            content: function (e) {
                var dataItem = lyrGrid.data("kendoGrid").dataItem(e.target.closest("tr"));
                var content = dataItem.EndpointURI;
                return content;
            }
        });
        // ====================================================================================================


        function SetValidationIntegration(container) {
            var validator = container.find("#lyrEditIntegration").kendoValidator({
                rules: {                    
                    required: function (input) {                        
                        if (input.is("[class*='required']"))
                        {                            
                            if (!$.trim(input.val()))
                                return false;
                            return true;
                        }
                        return true;
                    },
                    urlvalid: function (input) {
                        if (input.is("[class*='urlvalid']")) {
                            if (!ValidUrl(input.val()))
                                return false;
                            return true;
                        }
                        return true;
                    },
                    uniqueValues: function (input) {
                        if (!input.hasClass("unique"))
                            return true;

                        let inputs = container.find(".unique");
                        let grid = lyrGrid.getKendoGrid();
                        let arr = []
                        inputs.each(function (i, a) {
                            var str = { field: $(a).attr("id"), operator: "eq", value: $(a).val().toString() }
                            arr.push(str)
                        });

                        let filteredSet = kendo.data.Query.process(grid.dataSource.data(), { filter: arr });
                        return !(filteredSet.data.length > 1);
                        
                    },
                    sourceEndPoint: function (input) {
                        if (!input.hasClass("uniqueSourceEndpointCreds"))
                            return true;
                        let inputs = container.find(".uniqueSourceEndpointCreds");
                        let grid = lyrGrid.getKendoGrid();
                        let arr = []
                        inputs.each(function (i, a) {
                            var str = { field: $(a).attr("id"), operator: "eq", value: $(a).val().toString() }
                            if (str.value)
                                arr.push(str);
                        });
                        if (!arr)
                            return true;
                        let filteredSet = kendo.data.Query.process(grid.dataSource.data(), { filter: {logic: "and",  filters:arr }});
                        return !(filteredSet.data.length > 1); 
                        
                    }
                }//end rules
                , messages: {
                    required: "* required",
                    urlvalid: "* check url",
                    uniqueValues: "* must be unique",
                    sourceEndPoint: "* source, endpoint and credentials must be unique"
            }
                , validateOnBlur: false
            });
        }
        
        function IntegrationDataSource() {
        	return new kendo.data.DataSource({
        		type:"signalr"
				,autoSync: false
        		,transport: {
					signalr: {
						promise: integrationHub.start(),
						hub: integrationHub,
						server: {
							read: "read"
							, create: "create"
							//, destroy: "destroy"
							, update: "update"
						},
						client: {
							read: "read"
							, create: "create"
							//, destroy: "destroy"
							, update: "update"
						}
        			}
                
                    , parameterMap: function (option, type)
                    {
                    	if (type === "create")
                    	{
                    		//option.GUID = kendo.guid();
                    	}
                        return option;
                    }
                }//end transport
                , error: OnDataSourceError
                , schema: {
                    model: {
                        id: "IntegrationID"
                        , fields: {
                            IntegrationID: { type: "number" }
                            , IntegrationName: { type: "string" }
                            , MatchType: { type: "string" }
                            , RegexMask: { type: "string" }
                            , SourceID: { type: "number" }
                            , CredentialID: { type: "number" }
                                , InstanceID: { type: "number" }
                            , MasterClientID: { type: "number" }
                            , CountryID: { type: "number" }
                            , TimeZoneString: { type: "string" }
                            , EndpointURI: { type: "string" }
                            , FileStartDate: { type: "date", format: "MM/dd/yyyy" }
                            , IsActive: { type: "boolean" }
                            //, CreatedDate: { type: "date", format: "MM/dd/yyyy" }
                            , LastUpdated: { type: "date", format: "MM/dd/yyyy", parse: function (value) { return parseUTCDate(value) } }
                            , DisableProcessing: { type: "boolean" }
                        }
                    },
                    parse: function (data)
                    {
                    	if (type(data) === "array")
                    	{
                    		$.each(data, function fnOffSetFileStartDateTime(i, elem)
                    		{
                    			elem.FileStartDate = new Date(Date.parse(elem.FileStartDate) + timeZoneOffset);
                    		});
                    	}
                    	else
                    	{
                    		data.FileStartDate = new Date(Date.parse(data.FileStartDate) + timeZoneOffset);
                    	}
                    	return data;
                    }
                }
                , serverPaging: false
                , serverSorting: false
                , serverFiltering: false
                , pageSize: 15
            });
        }

        function DataSourceCounter() {
            var counter = 1;
            var maxSources = 5;
            return {
                Add: function ()
                {
                    return counter++;
                }
                , GetMaxSourceCount: function ()
                {
                    return maxSources;
                }
            }            
        }

        function fnBindIntegrationDatasource() {
            if (dsCounter.Add() >= dsCounter.GetMaxSourceCount()) {                
                fnShowLoading(false);
                dsIntegration.fetch();
            }
        }

        function sourceFilter(ele){
            ele.kendoDropDownList({
                dataSource: dsSources
                , dataTextField: "Name"
                , dataValueField: "ID"
                , optionLabel: "--Select--"
            }).data("kendoDropDownList").wrapper.width("250px");
        }

        function credentialFilter(ele) {
            ele.kendoDropDownList({
                dataSource: dsCredentials
                , dataTextField: "Name"
                , dataValueField: "ID"
                , optionLabel: "--Select--"
            }).data("kendoDropDownList").wrapper.width("250px");
        }

        function agencyinstanceFilter(ele) {
            ele.kendoDropDownList({
                dataSource: dsAgencyInstances
                , dataTextField: "Name"
                , dataValueField: "ID"
				, optionLabel: "--Select--"
            }).data("kendoDropDownList").wrapper.width("250px");
        }

        function masterclientFilter(ele) {
            ele.kendoDropDownList({
                dataSource: dsMasterClients
                , dataTextField: "Name"
                , dataValueField: "ID"
                , optionLabel: "--Select--"
            }).data("kendoDropDownList").wrapper.width("250px");
        }

        function countryFilter(ele) {
            ele.kendoDropDownList({
                dataSource: dsCountries
                , dataTextField: "Name"
                , dataValueField: "ID"
                , optionLabel: "--Select--"
            }).data("kendoDropDownList").wrapper.width("250px");
        }


        fnTemplateData = function (dsName, idField) {
            var ds = eval(dsName);            
            var htm = tplData({
                DataSource: ds.data(),
                ID: idField
            });
            return htm;
        }
               
        fnTemplateCheck = function (value) {
            var isChecked = (value != '0') || (value === true);
            var htm = tplcheck({
                Val: isChecked
            });
            return htm;
        }
        function OnDataSourceError(e) {
            $("#errorMsg").text(e.xhr.toString());
        }

    });
</script>
}
<script id="integrationTemplate" type="text/html">
    <div id='lyrEditIntegration' class="lyrEdit">
        <div class="control-group">
            <label for="integrationName" class="control-label" style="width:200px;">Integration Name:</label>
            <div class="controls"><input type="text" class="required form-control" id="integrationName" style='width:375px; height:34px ' name="integrationName" data-bind="value:IntegrationName" tabindex="0" /></div>
        </div>

        <div class="control-group">
            <label for="matchType" class="control-label" style="min-width:100px">Match Type:</label><a href="javascript:showMatchTypeHelp();" style="color: blue; text-align:left">Help</a>@*<input type="button" onclick="showMatchTypeHelp()" class="k-button accountButton" style="width:100px" value="Help" />*@
            <ul class="fieldlist">
                <li>
                    <label>
                        <input type="radio" name="rdoMatchType" value="Prefix" data-bind="checked: MatchType" />
                        <label style="width:100px;">Prefix</label>
                    </label>
                    &nbsp;
                    <label>
                        <input type="radio" name="rdoMatchType" value="Mask" data-bind="checked: MatchType" />
                        <label style="width:100px;">Mask</label>
                    </label>
                </li>
            </ul>
        </div>

        <div class="control-group">
            <label for="RegexMask" class="control-label" style="width:200px;">Match Pattern:</label>
            <div class="controls"><textarea id="RegexMask" class="required  form-control" style="width: 375px; height: 80px;" name="RegexMask" data-bind="value: RegexMask" tabindex="2" /></div>
        </div>
        <div class="control-group">
            <label for="SourceID" class="control-label" style="width:200px;">Source:</label>
            <div class="controls"><input type="text" id="SourceID" class="required uniqueSourceEndpointCreds form-control" style='width:400px; ' name="SourceID" data-bind="value: SourceID" tabindex="3" /></div>
        </div>
        <div class="control-group">
            <label for="CredentialID" class="control-label" style="width:200px;">Credential:</label>
            <div class="controls"><input id="CredentialID" name="CredentialID" class="required uniqueSourceEndpointCreds" style='width:400px; ' data-bind="value: CredentialID" tabindex="4" /></div>
        </div>
        <div class="control-group">
            <label for="InstanceID" class="control-label" style="width:200px;">Agency Instance:</label>
            <div class="controls"><input id="InstanceID" name="InstanceID" class="required" style='width:400px; ' data-bind="value: InstanceID" tabindex="6" /></div>
        </div>
        <div class="control-group">
            <label for="MasterClientID" class="control-label" style="width:200px;">Master Client Code:</label>
            <div class="controls"><input id="MasterClientID" name="MasterClientID" class="required" style='width:400px; ' data-bind="value: MasterClientID" tabindex="7" /></div>
        </div>
        <div class="control-group">
            <label for="CountryID" class="control-label" style="width:200px;">Country:</label>
            <div class="controls"><input id="CountryID" name="CountryID" class="required" style='width:400px; ' data-bind="value: CountryID" tabindex="8" /></div>
        </div>
        <div class="control-group">
            <label for="TimeZoneString" class="control-label" style="width:200px;">Time Zone String:</label>
            <div class="controls"><input type="text" class="required form-control" id="TimeZoneString" style='width:375px; height: 34px ' name="TimeZoneString" data-bind="value:TimeZoneString" tabindex="10" /></div>
        </div>
        <div class="control-group">
            <label for="EndpointURI" class="control-label" style="width:200px;">Endpoint URI:</label>
            <div class="controls"><input type="text" class="required uniqueSourceEndpointCreds form-control" id="EndpointURI" style='width:375px; height: 34px ' name="EndpointURI" data-bind="value:EndpointURI" tabindex="11" /></div>
        </div>
        <div class="control-group">
            <label for="FileStartDate" class="control-label" style="width:200px;">File Start Date:</label>
            <div class="controls"><input id="FileStartDate" name="FileStartDate" style='width:430px; height: 34px ' data-role="datepicker" data-bind="value: FileStartDate" /></div>
        </div>
        <div class="control-group">
            <label for="IsActive" class="control-label" style="width:200px;">Active?: </label>
            <div class="controls"><input type="checkbox" id="IsActive" name="IsActive" data-bind="checked: IsActive" /></div>
        </div>
        <div class="control-group">
            <label for="DisableProcessing" class="control-label" style="width:200px;">Disable Processing: </label>
            <div class="controls"><input type="checkbox" id="DisableProcessing" name="DisableProcessing" data-bind="checked: DisableProcessing" /></div>
        </div>
        <div class="control-group">
            <label for="cbIsOverrideFailure" class="control-label" style="width:200px;">Override Job Failure: </label>
            <div class="controls"><input type="checkbox" id="cbIsOverrideFailure" name="cbIsOverrideFailure" data-bind="checked: IsOverrideFailure" /></div>
        </div>
        <div id="errorMsg"></div>
    </div>
</script>   



@*===========================================================================================================================*@

@*MatchTypeHelp...*@

<script type="text/javascript">
    function showMatchTypeHelp() {
        var wnd = $("#RegExCheck");

        $("#txtMask").val("");
        $("#txtFileNames").val("");
        $("#txtResultingRegex").val("");
        //$('#lblResultingRegex').empty().append("");
        $('#Results').empty().append("");

        wnd.kendoWindow({
            width: "480px",
            height: "560px",
            title: "REGEX",
            modal: true,
            draggable: true,
            resizable: false,
            visible: false
        }).data("kendoWindow").center().open();
    };

    $(document).on("click", "#RegExRetrieve", function (e) {
        var mask = $("#txtMask").val();
        var fileNames = $("#txtFileNames").val();

        if (mask == "" || fileNames == "")
            return;

        $.ajax({
            url: baseUrl + "/getMatchTypeResults",
            data: { Mask: mask, FileNames: fileNames },
            type: "POST",
            dataType: "json",
            success: function (data2) {

                var firstSplit = data2.split("^^^");
                $('#txtResultingRegex').empty().val(firstSplit[0]);

                var output = "";
                var secondSplit = firstSplit[1].split(",");
                for (var i = 0; i < secondSplit.length; i++) {
                    output += "<li>" + secondSplit[i] + "</li>";
                }

                $('#Results').empty().append("<ul style=\"list-style-type:disc\">" + output + "</ul>");
            },
            error: OnError
        });
        
    })

    function OnError() {
        alert("Failed!");
    }
</script>

<div id="RegExCheck" style="visibility:hidden">
    <br />Enter Mask:
    <br /><input type="text" class="required form-control" id="txtMask" style='width:435px; height: 34px ' name="txtMask"/>
    <br />Enter one or more filenames to test against (one per line):
    <br />@Html.TextArea("txtFileNames", string.Empty, 6, 57, null)
    <br />
    <br /><input type="button" id="RegExRetrieve" class="btn btn-primary" style="width:100px" value="Run" />
    <br />
    <br />Resulting Regex: @*<label id="lblResultingRegex" class="control-label" style="color: burlywood ; width:435px;"></label>*@
    <br /><input type="text" class="required form-control" id="txtResultingRegex" style='font-weight: bold; background-color: beige; width:435px; height: 34px ' name="txtResultingRegex" />
    <br />
    <br /><div id="Results" style="color: royalblue ;width:435px;"></div>
</div>
@*===========================================================================================================================*@





    <script id="tplCheck" type="text/x-kendo-template">
        #
        var iconClass = "glyphicon glyphicon-ok green";
        if(!Val) {
        iconClass = "glyphicon glyphicon-remove red";
        }
        #
        <div style='text-align:center'><i class="#=iconClass#">&nbsp;</i></div>
    </script>

    <script id="tplPopoverColumn" type="text/x-kendo-template">
        #
        if (!Val ) return "";
        var ellipsisText = (Val.length >20) ? Val.substr(0,25)+'<b>...</b>': Val;

        var panelTemplate=  kendo.template($("\#popOverPanelHTML").html());
        var content = panelTemplate({Text: data.Val, Title: data.Title}, {useWithBlock:false});
        #

        <div class="tooltipped" title="#=Title#" data-content='#=content#'>#=ellipsisText#</div>
    </script>
<script>
    function trimText(txt, len) {
        if (!txt)
            return '';
        if (txt.length > len)
            return txt.substring(0, len) + '...';
        else
            return txt;
    }
</script>
    <script type="text/x-kendo-template" id="popOverPanelHTML">
        <div class="k-block"><div class="k-header k-shadow">#=data.Title#</div>#=data.Text#</div>
    </script>
    <script id="tplPopoverColumnItemList" type="text/x-kendo-template">
        #var ellipsisText = (Val.length >20) ? Val.substr(0,20)+'<b>...</b>': Val;#
        <div class="popoversList" title="#=Title#" data-content="<div style='width:550px'>#=ListItems#</div>">#=ellipsisText#</div>
    </script>

    <script id="tplDataDisplayName" type="text/x-kendo-template">
        <div>
            # var obj = $.grep(DataSource, function(ele,id){return ele.ID == ID});
            if(obj.length == 1){
            #
            #=obj[0].Name#
            #}#
        </div>
    </script>

    <style>
        .popover {
            max-width: 550px;
        }
    </style>
