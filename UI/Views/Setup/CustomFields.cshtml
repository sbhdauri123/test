@using Newtonsoft.Json
@{
    ViewBag.Title = "Custom Fields";
    Layout = "~/Views/Shared/_Layout.cshtml";
}
@{
    var maxActiveFields = @Html.Raw(ViewBag.MaxActiveFields);
}
<style>
    .container {
        width: 100%;
    }
</style>
<div id="mainBody">
    <div class="dragoMain" id="userTableContainer">
        <div id="gridContainer" class="toolControlContainer tc-Main">
            <header>
                <h2>Custom Fields Setup</h2>
            </header>
            <button id="customFieldEdit">Edit</button>
            <button id="customFieldCancel">Cancel</button>
            <button id="customFieldSave">Save</button>
            <div id="errorMsg"></div>
            <div id="kGrid" class="toolControl">
            </div>
        </div>
    </div>

    @section scripts
    {
        <script src="~/Scripts/Greenhouse/common.js"></script>
        <script type="text/javascript">


            var editable = false;

            $(function() {
                $(".dragoMain").parents(".container").removeClass("container");
                var url = "/customFieldHub";

                var customFieldHub = new signalR.HubConnectionBuilder()
                .withUrl(url, {
                    transport: signalR.HttpTransportType.LongPolling
                })
                .build();

                var lyrGrid = $("#kGrid");

                var tplcheck = kendo.template($("#tplCheck").html());

                var dsCustomField = LoadCustomFieldsData();
                var maxActiveFields = JSON.parse('@maxActiveFields');

                $("button#customFieldEdit").kendoButton({
                    click: function() {
                        SetEditableTo(true);
                    }
                });


                $("button#customFieldCancel").kendoButton({
                    click: function() {
                        if (editable) {
                            if (confirm("Cancel all changes ?")) {
                                ResetDirty();
                                SetEditableTo(false);
                                resetErrorMessage();
                                $('#kGrid').data('kendoGrid').dataSource.read();
                            }
                        }
                    }
                });


                $("button#customFieldSave").kendoButton({
                    click: function(e) {
                        if (!editable) return;

                        fnShowLoading(true);
                        resetErrorMessage();

                        var total = dsCustomField.data().length;

                        //let's check if any source + advertiser has more than the maximum number of active custom field allowed
                        var countByAdvertiser = {};
                        var advertisersTooManyFields = "";

                        //Step 1/2: lets count the number of active custom fields
                        for (var i = 0; i < total; i++) {
                            var value = (dsCustomField.data()[i].newIsActiveValue != undefined) ? dsCustomField.data()[i].newIsActiveValue : dsCustomField.data()[i].IsActive;
                            if (value == true) {
                                var key = dsCustomField.data()[i].SourceName + "__" + dsCustomField.data()[i].ParentID + "__" + dsCustomField.data()[i].ChildID;
                                if (countByAdvertiser[key] == undefined) {
                                    countByAdvertiser[key] = 0;
                                }

                                countByAdvertiser[key]++;
                            }
                        }

                        //Step 2/2: let s compare each total per advertiser to the max allowed
                        for (var key in countByAdvertiser) {
                            var cnt = countByAdvertiser[key];

                            //get the max active fields for the current source name
                            var extract = key.split("__");
                            var sourcename = extract[0];
                            var parentID = extract[1];
                            var childID = extract[2];
                            var max = maxActiveFields[sourcename];
                            if (cnt > max) {
                                if (advertisersTooManyFields.length != 0) {
                                    advertisersTooManyFields += ", ";
                                }

                                advertisersTooManyFields += "Source=" + sourcename + "ParentID=" + parentID + "  ChildID=" + childID;
                            }
                        }

                        if (advertisersTooManyFields.length > 0) {
                            setErrorMessage("Error: the following advertiser(s) have more than the maximum active Custom fields allowed:" + advertisersTooManyFields);
                            fnShowLoading(false);
                            return;
                        }

                        var errorMessage = CheckForFunctionalDuplicates();
                        if (errorMessage != "") {
                            setErrorMessage(errorMessage);
                            fnShowLoading(false);
                            return;
                        }

                        //If we reach this point, the previous validation passed
                        //we can update the model with the value selected by the user
                        for (var i = 0; i < total; i++) {
                            if (dsCustomField.data()[i].newIsActiveValue != undefined) {
                                dsCustomField.data()[i].IsActive = dsCustomField.data()[i].newIsActiveValue;
                                dsCustomField.data()[i].dirty = true;
                            }
                        }

                        var grid = $("#kGrid").data("kendoGrid");
                        editable = false;
                        grid.saveChanges();
                        ResetDirty();
                    }
                });

                $("button#customFieldCancel").hide();
                $("button#customFieldSave").hide();

                lyrGrid.kendoGrid({
                        dataSource: dsCustomField,
                        autoBind: false,
                        columns:
                        [
                            { field: "SourceName", title: "Source Name", width: "130px" },
                            { field: "Entity", title: "Entity Name", width: "130px" },
                            { field: "ParentID", title: "Parent ID", width: "130px" },
                            { field: "ParentName", title: "Parent Name", width: "170px" },
                            { field: "ChildID", title: "Child ID", width: "170px" },
                            { field: "ChildName", title: "Child Name", width: "170px" },
                            { field: "RetrievedColumnName", title: "Retrieved Column Name", width: "170px" },
                            { field: "FunctionalColumnName", title: "Functional Column Name", width: "170px" },
                            {
                                field: "IsActive",
                                title: "Active?",
                                width: "100px",
                                template: function(dataItem) { return fnTemplateCheck(dataItem) },
                                filterable: {
                                    multi: true,
                                    checkAll: false,
                                    itemTemplate: function(ee) {
                                        return "<div><input type='checkbox' name='rb" + ee.field + "' value='#=data.IsActive#'/># if(data.IsActive) {# <i class='glyphicon glyphicon-ok green'/> #}else{# <i class='glyphicon glyphicon-remove red'/>#}#</div>";
                                    }
                                }
                            },
                            { field: "CreatedDate", title: "Created Date", width: "150px", template: "#=kendo.toString(CreatedDate, 'MM/dd/yyyy h:mm:ss tt')#" },
                            { field: "LastUpdated", title: "Last Updated", width: "150px", template: "#=kendo.toString(LastUpdated, 'MM/dd/yyyy h:mm:ss tt')#" }
                        ],
                        editable: true,
                        sortable: { mode: "multiple" },
                        columnMenu: gridColumMenuOptions,
                        filterable: gridFilterOptions,
                        resizable: true,
                        pageable: true,
                        scrollable: { virtual: false },
                        edit: function(e) {
                            if (!editable) {
                                this.closeCell();
                            }
                        },
                        dataBound: OnGridDataBound,
                        confirmation: "Are you sure you want to delete this?"

                    }).data("kendoGrid")
                    .wrapper.height("600px");


                // ====================================================================================================
                //tooltip
                lyrGrid.kendoTooltip({
                    show: function(e) {
                        if (this.content.text() != null && this.content.text().length > 0) {
                            this.content.parent().css("visibility", "visible");
                        }
                    },
                    hide: function(e) {
                        this.content.parent().css("visibility", "hidden");
                    },
                    filter: "td:nth-child(4)",
                    position: "bottom",
                    content: function(e) {
                        var dataItem = lyrGrid.data("kendoGrid").dataItem(e.target.closest("tr"));
                        var content = dataItem.RegexMask;
                        return content;
                    }
                });

                lyrGrid.kendoTooltip({
                    show: function(e) {
                        if (this.content.text() != null && this.content.text().length > 0) {
                            this.content.parent().css("visibility", "visible");
                        }
                    },
                    hide: function(e) {
                        this.content.parent().css("visibility", "hidden");
                    },
                    filter: "td:nth-child(10)",
                    position: "bottom",
                    content: function(e) {
                        var dataItem = lyrGrid.data("kendoGrid").dataItem(e.target.closest("tr"));
                        var content = dataItem.TimeZoneString;
                        return content;
                    }
                });

                lyrGrid.kendoTooltip({
                    show: function(e) {
                        if (this.content.text() != null && this.content.text().length > 0) {
                            this.content.parent().css("visibility", "visible");
                        }
                    },
                    hide: function(e) {
                        this.content.parent().css("visibility", "hidden");
                    },
                    filter: "td:nth-child(11)",
                    position: "bottom",
                    content: function(e) {
                        var dataItem = lyrGrid.data("kendoGrid").dataItem(e.target.closest("tr"));
                        var content = dataItem.EndpointURI;
                        return content;
                    }
                });


                // ====================================================================================================

                function OnGridDataBound() {
                    SetEditableTo(editable);

                    fnShowLoading(false);
                }

                function resetErrorMessage() {
                    $("#errorMsg").removeClass("alert-danger");
                    $("#errorMsg").html("");
                }

                function setErrorMessage(message) {
                    $("#errorMsg").addClass("alert-danger");
                    $("#errorMsg").html(message);
                }

                function LoadCustomFieldsData() {
                    var dsCustomField = CustomFieldDataSource();
                    fnShowLoading(true);
                    dsCustomField.fetch();
                    return dsCustomField;
                }

                function CustomFieldDataSource() {
                    return new kendo.data.DataSource({
                        type: "signalr",
                        autoSync: false,
                        transport: {
                            signalr: {
                                promise: customFieldHub.start(),
                                hub: customFieldHub,
                                server: {
                                    read: "read",
                                    create: "create",
                                    destroy: "destroy",
                                    update: "update"
                                },
                                client: {
                                    read: "read",
                                    create: "create",
                                    destroy: "destroy",
                                    update: "update"
                                }
                            },
                            parameterMap: function(option, type) {
                                if (type === "create") {
                                    //option.GUID = kendo.guid();
                                }
                                return option;
                            }
                        } //end transport
                        ,
                        error: function(e) {
                            alert(e.xhr.toString());
                        },
                        schema: {
                            model: {
                                id: "CustomFieldID",
                                fields: {
                                    SourceName: { type: "string", editable: false },
                                    Entity: { type: "string", editable: false },
                                    ParentID: { type: "string", editable: false },
                                    ParentName: { type: "string", editable: false },
                                    ChildID: { type: "string", editable: false },
                                    ChildName: { type: "string", editable: false },
                                    RetrievedColumnName: { type: "string", editable: false },
                                    FunctionalColumnName: { type: "string", editable: true },
                                    IsActive: { type: "boolean", editable: false },
                                    CreatedDate: { type: "date", format: "MM/dd/yyyy h:mm:ss tt", editable: false, parse: function (value) { return parseUTCDate(value) } },
                                    LastUpdated: { type: "date", format: "MM/dd/yyyy h:mm:ss tt", editable: false, parse: function (value) { return parseUTCDate(value) } }
                                }
                            }
                        },
                        serverPaging: false,
                        serverSorting: false,
                        serverFiltering: false,
                        pageSize: 100
                    });
                }

                ResetDirty = function() {
                    var total = dsCustomField.data().length;
                    for (var i = 0; i < total; i++) {
                        dsCustomField.data()[i].newIsActiveValue = undefined;
                    }
                }

                CheckForFunctionalDuplicates = function() {
                    // once the data has been edited, we verify that for each source a same functional column value 
                    // was not used multiple times
                    var total = dsCustomField.data().length;
                    var dict = {};
                    for (var i = 0; i < total; i++) {
                        var data = dsCustomField.data()[i];
                        if (data.FunctionalColumnName == null) continue;
                        var key = data.SourceName + "__" + data.ParentID + "__" + data.ChildID + "__" + data.FunctionalColumnName;
                        if (dict[key] === undefined) {
                            dict[key] = 1;
                        } else {
                            dict[key]++;
                        }
                    }

                    // now iterating through the dictionary to find eventual duplicates
                    var message = "";
                    for (var key in dict) {
                        var value = dict[key];
                        if (value != undefined && value > 1) {
                            var splitValues = key.split("__");
                            message += "<li>For Source / ParentID / ChildID " + splitValues[0] + " / " + splitValues[1] + " / " + splitValues[2] + " Functional Column value '" + splitValues[3] + "' has been used " + value + " times (only allowed 1 time)</li>";
                        }
                    }

                    if (message != "") {
                        message = "<b>Functional Column duplicated:</b> <ul>" + message + "</ul>";
                    }
                    return message;
                }

                CheckForRetrievedDuplicates = function() {
                    //checking the data for duplicates when the page loads
                    var total = dsCustomField.data().length;
                    var dict = {};
                    for (var i = 0; i < total; i++) {
                        var data = dsCustomField.data()[i];
                        var key = data.SourceName + "__" + data.AgencyID + "__" + data.AdvertiserID + "__" + data.RetrievedColumnName;
                        if (dict[key] === undefined) {
                            dict[key] = 1;
                        } else {
                            dict[key]++;
                        }
                    }

                    // now iterating through the dictionary to find eventual duplicates
                    var message = "";
                    for (var key in dict) {
                        var value = dict[key];
                        if (value != undefined && value > 1) {
                            var splitValues = key.split("__");
                            message += "<li>ParentID = '" + splitValues[0] + "' - ChildID = '" + splitValues[1] + "' RetrievedColumnName = '" + splitValues[2] + "' appeared " + value + " times</li>"
                        }
                    }

                    if (message.length > 0) {
                        // we have duplicates, showing the error message + disabling edit controls

                        $("button#customFieldEdit").data("kendoButton").enable(false);
                        $("button#customFieldCancel").data("kendoButton").enable(false);
                        $("button#customFieldSave").data("kendoButton").enable(false);
                        message = "<b>ERROR: Duplicated records found. As a result the edit commands have been disabled.</b> See the list of duplicates:<br/><ul>" + message + "</ul>";
                        setErrorMessage(message);
                    }
                }

                fnTemplateCheck = function(item) {
                    var isChecked = true;

                    if (item.newIsActiveValue != undefined) {
                        isChecked = item.newIsActiveValue;
                    } else {

                        isChecked = (item.IsActive != '0') || (item.IsActive === true);
                    }

                    var htm = tplcheck({
                        Val: isChecked,
                        IsDirty: item.newIsActiveValue != undefined
                    });
                    return htm;
                }


            });

            $().ready(function() {
                CheckForRetrievedDuplicates();

                $("#kGrid .k-grid-content").on("change",
                    "input.isActiveCheckBox",
                    function(e) {
                        var grid = $("#kGrid").data("kendoGrid");
                        var dataItem = grid.dataItem($(e.target).closest("tr"));

                        if (dataItem.IsActive == this.checked) {
                            dataItem.newIsActiveValue = undefined;
                            $(e.target).closest("td").find("span.k-dirty").remove();
                            return;
                        }

                        // add the dirty flag to the cell
                        $(e.target).closest("td").prepend("<span class='k-dirty'></span>");
                        dataItem.newIsActiveValue = this.checked;

                    });
                $("#kGrid").change(function() {
                    SetEditableTo(editable);
                });

                var grid = $("#kGrid").data("kendoGrid");
                var dataSource = grid.dataSource;

                var grid = $('#kGrid').data('kendoGrid');
                var pager = grid.pager;
                pager.bind('change',
                    function(e) {
                        SetEditableTo(editable);
                    });

            });

            function SetEditableTo(value) {
                editable = value;
                $(".isActiveImage").css("display", value ? "none" : "block");
                $(".isActiveCheckBox").css("display", value ? "block" : "none");
                $("#grid .k-grid-delete").toggle(editable);

                if (editable) {
                    $("button#customFieldEdit").hide();
                    $("button#customFieldCancel").show();
                    $("button#customFieldSave").show();
                } else {
                    $("button#customFieldEdit").show();
                    $("button#customFieldCancel").hide();
                    $("button#customFieldSave").hide();
                }

            }

        </script>
    }




    @*===========================================================================================================================*@
    <script id="tplCheck" type="text/x-kendo-template">
        #
        var iconClass = "glyphicon glyphicon-ok green";
        if(!Val) {
        iconClass = "glyphicon glyphicon-remove red";
        }

        if (IsDirty)
        {
        #
        <span class='k-dirty'></span>
        #}#
        <div style='text-align:center'>
            <i class="isActiveImage #=iconClass#"></i>
            #if (Val)
            {#
            <input type="checkbox" checked="checked" class="isActiveCheckBox" />
            # } else { #
            <input type="checkbox" class="isActiveCheckBox" />
            # } #
        </div>
    </script>



    <style>
        .popover {
            max-width: 550px;
        }
    </style>

</div>