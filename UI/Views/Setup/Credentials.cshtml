@{

    ViewBag.Title = "Credentials";
    Layout = "~/Views/Shared/_Layout.cshtml";
}

<div class="dragoMain" id="userTableContainer">
    <div id="gridContainer" class="toolControlContainer tc-Main">
        <header>
            <h2>Credential Setup</h2>
        </header>
        <div id="kGrid" class="toolControl">
        </div>
    </div>
</div>

<script src="~/Scripts/Greenhouse/common.js"></script>
<script type="text/javascript">

$(function () {
    var tplcheck = kendo.template($("#tplCheck").html());

    var url = "/credentialHub";

    var credentialHub = new signalR.HubConnectionBuilder()
    .withUrl(url, {
        transport: signalR.HttpTransportType.LongPolling
    })
    .build();

    $("#kGrid").kendoGrid({
        dataSource: CredentialsDataSource()
        , columns: [
                {
                    command: [
                        { name: "edit", text: "edit", template: "<a class='btn-small lnkEdit'><i class='fa fa-pencil-square-o grid-edit-link'></i></a>", width: 10 },
                        { name: "destroy", text: "delete", template: "<a class='btn-small lnkDelete'><i class='fa fa-times grid-edit-link'></i></a>", width: 10 }
                    ]
                    , width: 130
                    , title: "<button id='btnAdd' class='btn btn-primary'>Add Credential</button>"
                    , menu: false
                }
            , { field: "CredentialName", title: "Credential Name", width: "200px" }
            //, { field: "ConnectionString", title: "Connection String", width: "400px", template: "#=ConnectionString.substring(0,45)+ '...'#" }
            , { field: "ConnectionStringDecrypted", title: "Connection String", width: "400px", template: "#= trimText(ConnectionStringDecrypted, 45) #"}
            , {
                field: "IsActive", title: "Active?", template: '#=fnTemplateCheck(IsActive)#', width: "100px", filterable: {
                    multi: true, checkAll: false, itemTemplate: function (ee) {
                        return "<div><input type='checkbox' name='rb" + ee.field + "' value='#=data.IsActive#'/># if(data.IsActive) {# <i class='icon-ok'/> #}else{# <i class='icon-remove'/>#}#</div>";
                    }
                }
            }
            //, { field: "CreatedDate", title: "Created", template: "#=kendo.toString(CreatedDate, 'G')#", width: "200px" }
               , { field: "LastUpdated", title: "Last Updated", template: "#=kendo.toString(LastUpdated, 'G')#", width: "200px" }
        ]
        , editable: {
            mode: "popup"
            , edit: true
            , destroy: true
            , create: true
            , confirmation: "Are you sure you want to delete this?"
            , template: $("#tplCredentials").html()
        }
        , dataBound: OnGridDataBind
        , edit: function (evt) {
            var container = evt.container;
            container.width("480").height("330");

            var win = container.data("kendoWindow");
            var title = (evt.model.CredentialName == "") ? "Add New Credential" : "Editing [" + evt.model.CredentialName + "]";
            console.log("title", title);
            win.title(title);

            

            var isActiveChekbox = container.find("#IsActive");
            var isNewServer = (evt.model.CredentialName == "");
            if (isNewServer) {
                isActiveChekbox.prop("checked", true);
                evt.model.IsActive = true;
            } else {
                if (evt.model.IsActive) {
                    isActiveChekbox.prop("checked", true);
                } else {
                    isActiveChekbox.prop("checked", false);
                }
            }



            SetValidation(container);
            win.center().open();

            //evt.container.data("kendoWindow").center();
            //evt.container.data("kendoWindow").open();
            //if (evt.model.isNew()) {
            //    evt.container.kendoWindow("title", "Add New Credential");
            //} else {
            //    evt.container.kendoWindow("title", "Editing [" + evt.model.CredentialName + "]");
            //}
        }
        , save: function (evt) {
            var container = evt.container;
            var validator = evt.container.find(".lyrEdit").data("kendoValidator");
            if (!validator.validate())
                evt.preventDefault();

        }
        , sortable: { mode: "multiple" }
        , columnMenu: gridColumMenuOptions
        , filterable: gridFilterOptions
        , resizable: true
        , pageable: true
        , scrollable: true
    }).data("kendoGrid")
    .wrapper.height("600px");

    $("#kGrid").kendoTooltip({
        show: function (e) {
            if (this.content.text() != null && this.content.text().length > 0) {
                this.content.parent().css("visibility", "visible");
            }
        },
        hide: function (e) {
            this.content.parent().css("visibility", "hidden");
        },
        filter: "td:nth-child(3)",
        position: "bottom",
        content: function (e) {
            var dataItem = $("#kGrid").data("kendoGrid").dataItem(e.target.closest("tr"));
            var content = dataItem.ConnectionStringDecrypted;
            return content;
        }
    }).data("kendoTooltip");

    fnTemplateCheck = function (value)
    {
        //var isChecked = (value != '0') || (value === true);
        var htm = tplcheck({
        	Val: value //isChecked
        });
        return htm;
    }


    function CredentialsDataSource() {
        return new kendo.data.DataSource({
        	type: "signalr",
        	autoSync: false,
        	transport: {
        		signalr: {
                        promise: credentialHub.start(),
        			hub: credentialHub,
        			server: {
        				read: "readAsync"
						, create: "create"
						, destroy: "destroy"
						, update: "update"
        			},
        			client: {
        				read: "read"
						, create: "create"
						, destroy: "destroy"
						, update: "update"
        			}
        		},
        		parameterMap: function (option, type)
        		{
        			if (type === "create")
        			{
        				option.GUID = kendo.guid();
        			} else if (type === "destroy")
        			{
        				//option.SettingsFields = option.SettingsFields.split(",");
        				//option.SourceFileMetadataFields = option.SourceFileMetadataFields.split(",");
        				//option.CustomPropertiesFields = option.CustomPropertiesFields.split(",");

        			}

        			return option;
        		}
        	}
            , schema: {
                model: {
                    id: "CredentialID"
                    , fields: {
                        CredentialID: { type: "number" }
                        , CredentialName: { type: "string" }
                        , ConnectionString: { type: "string" }
                        , ConnectionStringDecrypted: {
                            type: "string",
                            validation: {
                                required: true,
                                connectionStringValidation: function (input) {
                                    if (location.search.includes("force=true")) return true;
                                    if (input.is("[name='ConnectionStringDecrypted']") && input.val() != "") {
                                        input.attr("data-connectionStringValidation-msg", "Connection string must be in the format 'Key1=somevalue1234;Key2=someothervalue5678;'");
                                        var regex = new RegExp("^[^;=]+=[^;=]+(?:;[^;=]+=[^;=]+)*;?$");
                                        return regex.test(input.val());
                                    }
                                    return true;
                                }
                            }
                        }
                        , IsActive: { type: "boolean" }
                        //, CreatedDate: { type: "date", format: "MM/dd/yyyy" }
                        , LastUpdated: { type: "date", format: "MM/dd/yyyy", parse: function (value) { return parseUTCDate(value) } }
                        , CredentialTypeID: { type: "number" }
                    }
                }
                , total: function (data) { return data.length; }
            }
            , requestEnd: function (e) {
                kendo.ui.progress($(".k-grid"), false);
            }
            , requestStart: function (e) {
                kendo.ui.progress($(".k-grid:visible"), true);
            }
            , serverPaging: false
            , serverSorting: false
            , serverFiltering: false
            , pageSize: 20
        });//end dataSource
    }//end DataSource()

    function SetValidation(container) {
        var validator = container.find(".lyrEdit").kendoValidator({
            rules: {
                required: function (input) {
                    if (input.is("[class*='required']")) {
                        if (!$.trim(input.val()))
                            return false;
                        return true;
                    }
                    return true;
                }
            }//end rules
            , messages: {
                required: "* required"
            }
            , validateOnBlur: false
        });
    }

    fnTemplateCheck = function (value) {
        //var isChecked = (value == 0); 
        var htm = tplcheck({
            Val: value //isChecked 
        });
        return htm;
    }
});
</script>

<script id="tplCredentials" type="text/x-kendo-template">

    <div id='lyrEdit' class="lyrEdit">
        <div class="control-group">
            <label for="CredentialName" class="control-label">Credential Name</label>
            <div class="controls"><input type="text" id="CredentialName" style="width:415px; width:100%; height: 34px" class="required form-control" name="CredentialName" data-bind="value: CredentialName" /></div>
        </div>
        <div class="control-group">
            <label for="ConnectionString" class="control-label">Connection String</label>
            <div class="controls"><input id="ConnectionStringDecrypted" style="width:415px; width:100%; height: 34px" class="required form-control" name="ConnectionStringDecrypted" data-bind="value: ConnectionStringDecrypted" /></div>
        </div>
        <div class="control-group">
            <label for="IsActive" class="control-label">Active?</label>
            <div class="controls"><input type="checkbox" id="IsActive" style="width:20px;text-align:left" name="IsActive" data-bind="checked: IsActive" /></div>
        </div>
    </div>
</script>

<script id="tplCheck" type="text/x-kendo-template">
    #
    var iconClass = "glyphicon glyphicon-ok green";
    if(!Val) {
    iconClass = "glyphicon glyphicon-remove red";
    }
    #
    <div style='text-align:center'><i class="#=iconClass#">&nbsp;</i></div>
</script>

<script>
    function trimText(txt, len) {
        if (!txt)
            return '';
        if (txt.length > len)
            return txt.substring(0, len) + '...';
        else
            return txt;
    }
</script>