@{
    //var getTransformClasses = ViewBag.TransformClasses;

    ViewBag.Title = "Sources";
    Layout = "~/Views/Shared/_Layout.cshtml";
}

<div class="dragoMain" id="userTableContainer">
    <div id="gridContainer" class="toolControlContainer tc-Main">
        <header>
            <h2>Source Setup</h2>            
        </header>
        <div id="kGrid" class="toolControl">
        </div>
    </div>
</div>

@section scripts
{
<script src="~/Scripts/Greenhouse/common.js"></script>
<script type="text/javascript">
    
    $(function () {
        @*var dsTransformClasses = eval(@Html.Raw(Newtonsoft.Json.JsonConvert.SerializeObject(getTransformClasses)));*@

        var url = "/sourceHub";

        var sourceHub = new signalR.HubConnectionBuilder()
        .withUrl(url, {
            transport: signalR.HttpTransportType.LongPolling
        })
        .build();

        var dsDataSources = GetDataSource("GetDataSources", "DataSourceID", "DataSourceName");
        dsDataSources.fetch();
        var dsETLTypes = GetDataSource("GetETLTypes", "ETLTypeID", "ETLTypeName");
        dsETLTypes.fetch();

        var tplData = kendo.template($("#tplDataDisplayName").html());
        var tplcheck = kendo.template($("#tplCheck").html());

        fnRenderPopoverColumn = kendo.template($("#tplPopoverColumn").html());
    
        $("#kGrid").kendoGrid({
            dataSource: SourceDataSource()
                , columns: [
                     {
                         command: [{ name: "edit", text: "", template: "<a class='btn-small lnkEdit'><i class='fa fa-pencil-square-o grid-edit-link'></i></a>", width: 10 }
                         , { name: "destroy", template: "<a class='btn-small lnkDelete'><i class='fa fa-times grid-edit-link'></i></a>", text: "", width: 10 }], width: 120
                             , title: "<button id='btnAdd' class='btn btn-primary'>Add Source</button>", menu: false
                     }
               , { hidden: true, field: "SourceID" }
               , { field: "SourceName", title: "Source Name", width: "170px" }
               , { field: "DataSourceID", title: "Data Source", width: "140px", template: "#=fnTemplateData('dsDataSources', DataSourceID) #", filterable: { ui: datasourceFilter } }
               , { field: "ETLTypeID", title: "ETL Type", width: "120px", template: "#=fnTemplateData('dsETLTypes', ETLTypeID) #", filterable: { ui: etltypeFilter } }
               , { field: "BackfillHourOffset", title: "Backfill Hour Offset", width: "160px" }
               , {
                   field: "IsActive", title: "Active?", width: "100px", template: '#=fnTemplateCheck(IsActive)#',
                   filterable: {
                       multi: true,
                       checkAll: false,
                       itemTemplate: function (ee) {
                           return "<div><input type='checkbox' name='rb" + ee.field + "' value='#=data.IsActive#'/># if(data.IsActive) {# <i class='glyphicon glyphicon-ok green'/> #}else{# <i class='glyphicon glyphicon-remove red'/>#}#</div>";
                       }
                   }
               }
               //, { field: "CreatedDate", title: "Created", template: "#=kendo.toString(CreatedDate, 'G')#", width: "200px" }
               , { field: "LastUpdated", title: "Last Updated", template: "#=kendo.toString(LastUpdated, 'G')#", width: "200px" }
            ]
            , editable: {
                mode: "popup"
                , edit: true
                , destroy: true
                , create: true
                , confirmation: "Are you sure you want to delete this?"
                , template: $("#tplSources").html()
            }
            , dataBound: OnGridDataBind
            , edit: function (evt) {
                var container = evt.container;
                container.width("470").height("500");

                var win = container.data("kendoWindow");
                win.center();
                var title = (evt.model.SourceName == "") ? "Add New Source" : "Editing Source [" + evt.model.SourceName + "]";
                win.title(title);

                if (!evt.model.isNew())
                    onEdit(evt);

                var ddldatasources = container.find("#DataSourceID"); //
                ddldatasources.kendoDropDownList({
                    dataSource: dsDataSources
                    , dataTextField: "Name"
                    , dataValueField: "ID"
                    , optionLabel: "--Select a Data Source--"
                });

                var ddletltypes = container.find("#ETLTypeID"); //
                ddletltypes.kendoDropDownList({
                    dataSource: dsETLTypes
                    , dataTextField: "Name"
                    , dataValueField: "ID"
                    , optionLabel: "--Select an ETL Type--"
                });


                var txtBackfillHourOffset = container.find("#BackfillHourOffset"); //
                //if (evt.model.BackfillHourOffset == 0)
                if (title == "Add New Source")
                    txtBackfillHourOffset.val("48").change();


                var isActiveChekbox = container.find("#IsActive");
                var isNewServer = (evt.model.SourceName == "");
                if (isNewServer) {
                    isActiveChekbox.prop("checked", true);
                    evt.model.IsActive = true;
                } else {
                    if (evt.model.IsActive) {
                        isActiveChekbox.prop("checked", true);
                    } else {
                        isActiveChekbox.prop("checked", false);
                    }
                }

                SetValidation(container);

                evt.container.find(".k-grid-cancel").on("click", function (e) { //-
                    //evt.sender.cancelChanges();
                    evt.sender.dataSource.read();
                });
            }
            , save: function (evt) {
                var container = evt.container;
                var validator = evt.container.find(".lyrEdit").data("kendoValidator");
                if (!validator.validate())
                    evt.preventDefault();

            }
           , sortable: { mode: "multiple" }
           , columnMenu: gridColumMenuOptions
           , filterable: gridFilterOptions
           , resizable: true
           , pageable: true
           , scrollable: true
           //, selectable: true //
        }).data("kendoGrid")
        .wrapper.height("600px");

        // ========================================================
        // Used to make AdvertiserName non-editable
        function onEdit(e) {
            $("#SourceName").attr("readonly", true);
        }
        // ========================================================

        //$("#kGrid").kendoTooltip({
        //    show: function (e) {
        //        if (this.content.text() != null && this.content.text().length > 0) {
        //            this.content.parent().css("visibility", "visible");
        //        }
        //    },
        //    hide: function (e) {
        //        this.content.parent().css("visibility", "hidden");
        //    },
        //    filter: "td:nth-child(4)",
        //    position: "bottom",
        //    content: function (e) {
        //        var dataItem = $("#kGrid").data("kendoGrid").dataItem(e.target.closest("tr"));
        //        var content = dataItem.ImportClass;
        //        return content;
        //    }
        //}).data("kendoTooltip");
        //$("#kGrid").kendoTooltip({
        //    show: function (e) {
        //        if (this.content.text() != null && this.content.text().length > 0) {
        //            this.content.parent().css("visibility", "visible");
        //        }
        //    },
        //    hide: function (e) {
        //        this.content.parent().css("visibility", "hidden");
        //    },
        //    filter: "td:nth-child(5)",
        //    position: "bottom",
        //    content: function (e) {
        //        var dataItem = $("#kGrid").data("kendoGrid").dataItem(e.target.closest("tr"));
        //        var content = dataItem.ProcessClass;
        //        return content;
        //    }
        //}).data("kendoTooltip");
        //$("#kGrid").kendoTooltip({
        //    show: function (e) {
        //        if (this.content.text() != null && this.content.text().length > 0) {
        //            this.content.parent().css("visibility", "visible");
        //        }
        //    },
        //    hide: function (e) {
        //        this.content.parent().css("visibility", "hidden");
        //    },
        //    filter: "td:nth-child(6)",
        //    position: "bottom",
        //    content: function (e) {
        //        var dataItem = $("#kGrid").data("kendoGrid").dataItem(e.target.closest("tr"));
        //        var content = dataItem.ImportExportName;
        //        return content;
        //    }
        //}).data("kendoTooltip");
        //$("#kGrid").kendoTooltip({
        //    show: function (e) {
        //        if (this.content.text() != null && this.content.text().length > 0) {
        //            this.content.parent().css("visibility", "visible");
        //        }
        //    },
        //    hide: function (e) {
        //        this.content.parent().css("visibility", "hidden");
        //    },
        //    filter: "td:nth-child(7)",
        //    position: "bottom",
        //    content: function (e) {
        //        var dataItem = $("#kGrid").data("kendoGrid").dataItem(e.target.closest("tr"));
        //        var content = dataItem.ProcessExportName;
        //        return content;
        //    }
        //}).data("kendoTooltip");

        fnTemplateCheck = function (value)
        {
        	var isChecked = (value != '0') || (value === true);
        	var htm = tplcheck({
        		Val: isChecked
        	});
        	return htm;
        }

        function SourceDataSource() {
        	return new kendo.data.DataSource({
        		type: "signalr",
        		autoSync: false,
        		transport: {
        			signalr: {
                            promise: sourceHub.start(),
        			    hub: sourceHub,
        				server: {
        					read: "readAsync"
							, create: "create"
							, destroy: "destroy"
							, update: "update"
        				},
        				client: {
        					read: "read"
							, create: "create"
							, destroy: "destroy"
							, update: "update"
        				}
        			},
        			parameterMap: function (option, type)
        			{
        				if (type === "create")
        				{
        					//option.GUID = kendo.guid();
        				} else if (type === "destroy")
        				{
        					//option.SettingsFields = option.SettingsFields.split(",");
        					//option.SourceFileMetadataFields = option.SourceFileMetadataFields.split(",");
        					//option.CustomPropertiesFields = option.CustomPropertiesFields.split(",");
        					
        				}

        				return option;
        			}
        		}
               , schema: {
                   model: {
                       id: "SourceID"
                       , fields: {
                                SourceID: { type: "number" }
                           , SourceName: { type: "string" }
                           //, ImportClass: { type: "string" }
                           //, ProcessClass: { type: "string" }
                           //, ImportExportName: { type: "string" }
                           //, ProcessExportName: { type: "string" }
                           , DataSourceID: { type: "number" }
                           , ETLTypeID: { type: "number" }
                           , BackfillHourOffset: { type: "number" }
                           , IsActive: { type: "boolean" }
                           //, CreatedDate: { type: "date", format: "MM/dd/yyyy" }
                           , LastUpdated: { type: "date", format: "MM/dd/yyyy", parse: function (value) { return parseUTCDate(value) } }
                       }
                   }
                   , total: function (data) { return data.length; }
               }
               , requestEnd: function (e) {
                   kendo.ui.progress($(".k-grid"), false);
               }
               , requestStart: function (e) {
                   kendo.ui.progress($(".k-grid:visible"), true);
               }
               , serverPaging: false
               , serverSorting: false
               , serverFiltering: false
               , pageSize: 15
                , error: function (e) {
                    if (e.xhr.toString().indexOf("Error: The DELETE") != -1) {
                        //http://www.telerik.com/forums/rows-disappeared-from-grid-on-delete-fail
                        $("#kGrid").data("kendoGrid").cancelChanges();
                        alert("This record can not be deleted because there are associated elements. Please delete all associated elements first.");
                    }
                }
            });//end dataSource
        }//end DataSource()

        function SetValidation(container) {
            var validator = container.find(".lyrEdit").kendoValidator({
                rules: {
                    alphaNumeric: function (input) {
                        if (input.is("[class *='alphaNumeric']")) {
                            pattern = /^[a-z\d]+$/i;
                            return (pattern.test(input.val()));
                        }
                        return true;
                    }
                    , required: function (input) {
                        if (input.is("[class*='required']") || input.is("[class*='required2']")) {
                            if (!$.trim(input.val()))
                                return false;
                            return true;
                        }
                        return true;
                    }
                    , required2: function (input) {
                        if (input.is("[class*='required2']")) {
                            if ($.trim(input.val()) && input.val() <= 0)
                                return false;
                            return true;
                        }
                        return true;
                    }
                }//end rules
                , messages: {
                    alphaNumeric: "* Alphanumeric values only"
                    , required: "* required"
                    , required2: "* Must be greater than 0"
                }
                , validateOnBlur: false
            });
        }


        function RenderDropDownList(array) {
            var dropDownList = "<select class='gridColumnDropDownList'>";
            dropDownList = dropDownList + "<option value='default' disabled>>See Details</option>";
            dropDownList = dropDownList + "<optgroup disabled label='' >";

            for (var i = 0; i < array.length; i++) {
                dropDownList = dropDownList + "<option value='" + array[i] + "'>" + array[i] + "</option>";
            }

            dropDownList = dropDownList + "</optgroup>";
            dropDownList = dropDownList + "</select>";
            return dropDownList;
        }

        ConvertCommaSeparatedStringToDropDownList = function (commaSeparatedString) {
            if (!commaSeparatedString || commaSeparatedString == "") return "";

            var array = [];
            array = commaSeparatedString.split(",").sort();

            //var list = "<ol><li>" + array.join("</li><li>") + "</li></ol>";
            //var fnRenderPopoverColumnList = kendo.template($("#tplPopoverColumnItemList").html());
            //return fnRenderPopoverColumnList({ Title: "See Details", Val: commaSeparatedString, ListItems: list });

            return RenderDropDownList(array);
        }


        function ConvertCommaSeparatedStringToDictionary(commaSeparatedString) {
            var arrayOfJsonDictionary = [];

            if (!commaSeparatedString || commaSeparatedString == "")
                return arrayOfJsonDictionary;

            var array = [];
            array = commaSeparatedString.split(",");

            //remove properties => ["parent", "_events", "uid"]
            var arrayToCommaSeparatedString = kendo.stringify(array);
            var jsonArray = $.parseJSON(arrayToCommaSeparatedString);

            $.each(jsonArray, function parseJsonArray(i, commaSeparatedString) {
                arrayOfJsonDictionary.push({
                    Name: jsonArray[i] // i ,
                    //Value: jsonArray[i]
                });
            });

            return arrayOfJsonDictionary;
        }


        ConvertCommaSeparatedStringToTable = function (commaSeparatedString) {
            if (!commaSeparatedString || commaSeparatedString == "") return "";

            //var array = ConvertCommaSeparatedStringToDictionary(commaSeparatedString);
            var array = [];
            array = commaSeparatedString.split(",");

            var MapArrayItemsToNewTableRow = function (item, i) {
                //return "<tr><td>" + item.Name + "</td><td>" + item.Value + "</td></tr>";
                return "<tr><td>" + item + "</td></tr>";
            }

            var tableRows = array.map(MapArrayItemsToNewTableRow);
            var table = $("#tableTemplate").html().replace("**BODY**", tableRows.join(""));

            var arrayToCommaSeparatedString = JSON.stringify(array).replace("[", "").replace("]", "");
            var ellipsisText = (arrayToCommaSeparatedString.length > 50) ? arrayToCommaSeparatedString.substr(0, 50) + '<b>...</b>' : arrayToCommaSeparatedString;

            var RenderAccordionTableTemplate = kendo.template($("#accordionTableTemplate").html());
            var displayTitle = '<dev class="btn" style="text-align:center; display:block;">See Details</dev>';

            return RenderAccordionTableTemplate({
                DisplayTitle: displayTitle, // ellipsisText,
                Content: table
            });
        }

        function datasourceFilter(ele) {
            ele.kendoDropDownList({
                dataSource: dsDataSources
               , dataTextField: "Name"
               , dataValueField: "ID"
               , optionLabel: "--Select--"
            }).data("kendoDropDownList").wrapper.width("250px");
        }

        function etltypeFilter(ele) {
            ele.kendoDropDownList({
                dataSource: dsETLTypes
               , dataTextField: "Name"
               , dataValueField: "ID"
               , optionLabel: "--Select--"
            }).data("kendoDropDownList").wrapper.width("250px");
        }

        fnTemplateData = function (dsName, idField) {
            var ds = eval(dsName);
            var htm = tplData({ DataSource: ds.data(), ID: idField });
            return htm;
        }

        fnTemplateCheck = function (value) {
            //var isChecked = (value == 0);
            var htm = tplcheck({
                Val: value //isChecked
            });
            return htm;
        }

    });
</script>
}


<script type="text/html" id="tableTemplate">
    <div class="table-responsive">
        <table class="table table-bordered">
            <tr>
                @*<th>Name</th>
                <th>Value</th>*@
            </tr>
            <tbody>
                **BODY**
            </tbody>
        </table>
    </div>
</script>


<script type="text/x-kendo-template" id="accordionTemplate">
    # if(data.Html && data.Header){
    var guid = kendo.guid();#
    <div class="panel-group" id="#=guid#" role="tablist" aria-multiselectable="true">
        <div class="panel panel-default">
            <div class="panel-heading" role="tab" id="headingOne#=guid#">
                <h4 class="panel-title">
                    <a role="button" data-toggle="collapse" data-parent="\##=guid#" href="\#id#=guid#" aria-expanded="true" aria-controls="collapseOne">
                        #=data.Header#
                    </a>
                </h4>
            </div>
            <div id="id#=guid#" class="panel-collapse collapse" role="tabpanel" aria-labelledby="headingOne#=guid#">
                <div class="panel-body"> #=data.Html#</div>
            </div>
        </div>
    </div>
    #}#
</script>

<script id="accordionTableTemplate" type="text/x-kendo-template">
    # var accordionHtml = kendo.template($("\#accordionTemplate").html()); #
    <div title="Click to view values">
        #=accordionHtml({
            Header: DisplayTitle ,
            Html: Content
        })#
    </div>
</script>



<script id="tplPopoverColumnItemList" type="text/x-kendo-template">
    #var ellipsisText = (Val.length >20) ? Val.substr(0,20)+'<b>...</b>': Val;#
    <div class="popoversList" title="#=Title#" data-content="<div style='width:550px'>#=ListItems#</div>">#=ellipsisText#</div>
</script>




<script id="tplSources" type="text/html">
<div id='lyrEditSources' class="lyrEdit" style="align-content:center">
    <div class="control-group">                            
        <label for="SourceName" class="control-label" style="width:200px;">Source Name:</label>
        <div class="controls"><input type="text" id="SourceName" class="required form-control" style="width:400px; height: 34px " name="SourceName" data-bind="value:SourceName" /></div>                                
    </div>

    @*<div class="control-group">
        <label for="ImportClass" class="control-label" style="width:200px;">Import Class:</label>
        <div class="controls"><input type="text" id="ImportClass" class="required form-control" style="width:400px; height: 34px " name="ImportClass" data-bind="value:ImportClass" /></div>
    </div>
    
    <div class="control-group">
        <label for="ProcessClass" class="control-label" style="width:200px;">Process Class:</label>
        <div class="controls"><input type="text" id="ProcessClass" class="required form-control" style="width:400px; height: 34px " name="ProcessClass" data-bind="value:ProcessClass" /></div>
    </div>

    <div class="control-group">
        <label for="ImportExportName" class="control-label" style="width:200px;">Import Export Name:</label>
        <div class="controls"><input type="text" id="ImportExportName" class="required form-control" style="width:400px; height: 34px " name="ImportExportName" data-bind="value:ImportExportName" /></div>
    </div>

    <div class="control-group">
        <label for="ProcessExportName" class="control-label" style="width:200px;">Process Export Name:</label>
        <div class="controls"><input type="text" id="ProcessExportName" class="required form-control" style="width:400px; height: 34px " name="ProcessExportName" data-bind="value:ProcessExportName" /></div>
    </div>*@

    <div class="control-group">
        <label for="DataSourceID" class="control-label">Data Source:</label>
        <div class="controls"><input id="DataSourceID" style="width:430px" class="required" name="DataSourceID" data-bind="value: DataSourceID" /></div>
    </div>

    <div class="control-group">
        <label for="ETLTypeID" class="control-label">ETL Type:</label>
        <div class="controls"><input id="ETLTypeID" style="width:430px" class="required" name="ETLTypeID" data-bind="value: ETLTypeID" /></div>
    </div>

    <div class="control-group">
        <label for="BackfillHourOffset" class="control-label" style="width:200px;">Backfill Hour Offset:</label>
        <div class="controls"><input type="number" id="BackfillHourOffset" class="required2 form-control" style="width:400px; height: 34px " name="BackfillHourOffset" data-bind="value:BackfillHourOffset" min="1" step="1"/></div>
    </div>

    <div class="control-group">
        <label for="IsActive" class="control-label" style="width:200px;">Active?: </label>
        <div class="controls"><input type="checkbox" id="IsActive" name="IsActive" data-bind="checked: IsActive" /></div>
    </div>
</div>
</script>

<script id="tplCheck" type="text/x-kendo-template">
	#
	var iconClass = "glyphicon glyphicon-ok green";
	if(!Val) {
	iconClass = "glyphicon glyphicon-remove red";
	}
	#
	<div style='text-align:center'><i class="#=iconClass#">&nbsp;</i></div>
</script>  

<script id="tplDataDisplayName" type="text/x-kendo-template">
    <div>
        # var obj = $.grep(DataSource, function(ele,id){return ele.ID == ID});
        if(obj.length == 1){
        #
        #=obj[0].Name#
        #}#
    </div>
</script>

<script>
    function trimText(txt, len) {
        if (!txt)
            return '';
        if (txt.length > len)
            return txt.substring(0, len) + '...';
        else
            return txt;
    }
</script>

<script id="tplPopoverColumn" type="text/x-kendo-template">
    #
    if (!Val ) return "";
    var ellipsisText = (Val.length >20) ? Val.substr(0,20)+'<b>...</b>': Val;
    var panelTemplate=  kendo.template($("\#popOverPanelHTML").html());
    var content = panelTemplate({Text: data.Val, Title: data.Title}, {useWithBlock:false});
    #
    <div class="tooltipped" title="#=Title#" data-content='#=content#'>#=ellipsisText#</div>
</script>

<script type="text/x-kendo-template" id="popOverPanelHTML">
    <div class="k-block"><div class="k-header k-shadow">#=data.Title#</div>#=data.Text#</div>
</script>
